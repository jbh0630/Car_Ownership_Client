{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { fetchCarLists } from \"./CarAPI\";\nexport let Status;\n\n(function (Status) {\n  Status[\"Initial\"] = \"Nothing fetched\";\n  Status[\"Loading\"] = \"Loading..\";\n  Status[\"Deleted\"] = \"Deleted!\";\n  Status[\"UpToDate\"] = \"It's up to date!\";\n  Status[\"Error\"] = \"Error\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  carLists: [{\n    id: 0,\n    type: \"\",\n    attributes: {\n      year: 0,\n      make: \"\",\n      model: \"\",\n      price: 0,\n      person_id: 0\n    }\n  }],\n  status: Status.Initial\n};\nexport const fetchCarListsAsync = params => createAsyncThunk('lists/fetchCarLists', async () => {\n  const response = await fetchCarLists(params);\n  return response;\n});\nexport const carListSlice = createSlice({\n  name: \"carLists\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCarListsAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(fetchCarListsAsync.fulfilled, state => {\n      return produce(state, draft => {\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(fetchCarListsAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n        ;\n      });\n    });\n  }\n});\nexport const {} = carListSlice.actions;\nexport const selectCarLists = state => state.carLists.carLists;\nexport const selectCarStatus = state => state.carLists.status;\nexport default carListSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","produce","fetchCarLists","Status","initialState","carLists","id","type","attributes","year","make","model","price","person_id","status","Initial","fetchCarListsAsync","params","response","carListSlice","name","reducers","extraReducers","builder","addCase","pending","state","draft","Loading","fulfilled","UpToDate","rejected","Error","actions","selectCarLists","selectCarStatus","reducer"],"sources":["/Users/byeonghyeokjo/Desktop/artona/failed/src/features/lists/CarListSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCarLists } from \"./CarAPI\";\n\n\nexport enum Status {\n    Initial = \"Nothing fetched\",\n    Loading = \"Loading..\",\n    Deleted = \"Deleted!\",\n    UpToDate = \"It's up to date!\",\n    Error = \"Error\"\n}\n\nexport interface CarListState {\n    id: number,\n    type: string,\n    attributes: {\n        year: number,\n        make: string,\n        model: string,\n        price: number,\n        person_id: number\n    }\n}\n\nexport interface CarListsState {\n    carLists: CarListState[];\n    status: string;\n}\n\nconst initialState: CarListsState = {\n    carLists: [\n        {\n            id: 0,\n            type: \"\",\n            attributes: {\n                year: 0,\n                make: \"\",\n                model: \"\",\n                price: 0,\n                person_id: 0\n            }\n        }\n    ],\n    status: Status.Initial\n}  \n\nexport const fetchCarListsAsync = (params: any) => createAsyncThunk(\n    'lists/fetchCarLists',\n    async () => {\n        const response = await fetchCarLists(params);\n        return response;\n    }\n\n);\n\nexport const carListSlice = createSlice({\n    name: \"carLists\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchCarListsAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(fetchCarListsAsync.fulfilled, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(fetchCarListsAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                    ;\n                })\n            })\n    }\n});\n\nexport const {} = carListSlice.actions;\n\nexport const selectCarLists = (state: RootState) => state.carLists.carLists;\n\nexport const selectCarStatus = (state: RootState) => state.carLists.status;\n\nexport default carListSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,SAASC,aAAT,QAA8B,UAA9B;AAGA,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAyBZ,MAAMC,YAA2B,GAAG;EAChCC,QAAQ,EAAE,CACN;IACIC,EAAE,EAAE,CADR;IAEIC,IAAI,EAAE,EAFV;IAGIC,UAAU,EAAE;MACRC,IAAI,EAAE,CADE;MAERC,IAAI,EAAE,EAFE;MAGRC,KAAK,EAAE,EAHC;MAIRC,KAAK,EAAE,CAJC;MAKRC,SAAS,EAAE;IALH;EAHhB,CADM,CADsB;EAchCC,MAAM,EAAEX,MAAM,CAACY;AAdiB,CAApC;AAiBA,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAiBlB,gBAAgB,CAC/D,qBAD+D,EAE/D,YAAY;EACR,MAAMmB,QAAQ,GAAG,MAAMhB,aAAa,CAACe,MAAD,CAApC;EACA,OAAOC,QAAP;AACH,CAL8D,CAA5D;AASP,OAAO,MAAMC,YAAY,GAAGnB,WAAW,CAAC;EACpCoB,IAAI,EAAE,UAD8B;EAEpChB,YAFoC;EAGpCiB,QAAQ,EAAE,EAH0B;EAIpCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACaR,kBAAkB,CAACS,OADhC,EAC0CC,KAAD,IAAW;MAC5C,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACb,MAAN,GAAeX,MAAM,CAACyB,OAAtB;MACH,CAFa,CAAd;IAGH,CALL,EAMKJ,OANL,CAMaR,kBAAkB,CAACa,SANhC,EAM4CH,KAAD,IAAW;MAC9C,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACb,MAAN,GAAeX,MAAM,CAAC2B,QAAtB;MACH,CAFa,CAAd;IAGH,CAVL,EAWKN,OAXL,CAWaR,kBAAkB,CAACe,QAXhC,EAW2CL,KAAD,IAAW;MAC7C,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACb,MAAN,GAAeX,MAAM,CAAC6B,KAAtB;QACA;MACH,CAHa,CAAd;IAIH,CAhBL;EAiBH;AAtBmC,CAAD,CAAhC;AAyBP,OAAO,MAAM,KAAKb,YAAY,CAACc,OAAxB;AAEP,OAAO,MAAMC,cAAc,GAAIR,KAAD,IAAsBA,KAAK,CAACrB,QAAN,CAAeA,QAA5D;AAEP,OAAO,MAAM8B,eAAe,GAAIT,KAAD,IAAsBA,KAAK,CAACrB,QAAN,CAAeS,MAA7D;AAEP,eAAeK,YAAY,CAACiB,OAA5B"},"metadata":{},"sourceType":"module"}