{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import produce from \"immer\";\n// import { RootState } from \"../../app/store\";\n// // import { fetchCarLists } from \"./API\";\n// export enum Status {\n//     Initial = \"Nothing fetched\",\n//     Loading = \"Loading..\",\n//     Deleted = \"Deleted!\",\n//     UpToDate = \"It's up to date!\",\n//     Error = \"Error\"\n// }\n// export interface CarListState {\n//     id: number,\n//     type: string,\n//     attributes: {\n//         year: number,\n//         make: string,\n//         model: string,\n//         price: number,\n//         person_id: number\n//     }\n// }\n// export interface CarListsState {\n//     carLists: CarListState[];\n//     status: string;\n// }\n// const initialState: CarListsState = {\n//     carLists: [\n//         {\n//             id: 0,\n//             type: \"\",\n//             attributes: {\n//                 year: 0,\n//                 make: \"\",\n//                 model: \"\",\n//                 price: 0,\n//                 person_id: 0\n//             }\n//         }\n//     ],\n//     status: Status.Initial\n// }  \n// export const fetchCarListsAsync = createAsyncThunk(\n//     'lists/fetchCarLists',\n//     async () => {\n//         const response = await fetchCarLists();\n//         return response;\n//     }\n// );\n// export const carListSlice = createSlice({\n//     name: \"carLists\",\n//     initialState,\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchCarListsAsync.pending, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.Loading;\n//                 })\n//             })\n//             .addCase(fetchCarListsAsync.fulfilled, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.UpToDate;\n//                 })\n//             })\n//             .addCase(fetchCarListsAsync.rejected, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.Error;\n//                     ;\n//                 })\n//             })\n//     }\n// });\n// export const {} = carListSlice.actions;\n// export const selectCarLists = (state: RootState) => state.carLists.carLists;\n// export const selectCarStatus = (state: RootState) => state.carLists.status;\n// export default carListSlice.reducer;","map":{"version":3,"names":[],"sources":["/Users/byeonghyeokjo/Desktop/artona/failed/src/features/lists/CarListSlice.tsx"],"sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import produce from \"immer\";\n// import { RootState } from \"../../app/store\";\n// // import { fetchCarLists } from \"./API\";\n\n\n// export enum Status {\n//     Initial = \"Nothing fetched\",\n//     Loading = \"Loading..\",\n//     Deleted = \"Deleted!\",\n//     UpToDate = \"It's up to date!\",\n//     Error = \"Error\"\n// }\n\n// export interface CarListState {\n//     id: number,\n//     type: string,\n//     attributes: {\n//         year: number,\n//         make: string,\n//         model: string,\n//         price: number,\n//         person_id: number\n//     }\n// }\n\n// export interface CarListsState {\n//     carLists: CarListState[];\n//     status: string;\n// }\n\n// const initialState: CarListsState = {\n//     carLists: [\n//         {\n//             id: 0,\n//             type: \"\",\n//             attributes: {\n//                 year: 0,\n//                 make: \"\",\n//                 model: \"\",\n//                 price: 0,\n//                 person_id: 0\n//             }\n//         }\n//     ],\n//     status: Status.Initial\n// }  \n\n// export const fetchCarListsAsync = createAsyncThunk(\n//     'lists/fetchCarLists',\n//     async () => {\n//         const response = await fetchCarLists();\n//         return response;\n//     }\n\n// );\n\n// export const carListSlice = createSlice({\n//     name: \"carLists\",\n//     initialState,\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchCarListsAsync.pending, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.Loading;\n//                 })\n//             })\n//             .addCase(fetchCarListsAsync.fulfilled, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.UpToDate;\n//                 })\n//             })\n//             .addCase(fetchCarListsAsync.rejected, (state) => {\n//                 return produce(state, (draft) => {\n//                     draft.status = Status.Error;\n//                     ;\n//                 })\n//             })\n//     }\n// });\n\n// export const {} = carListSlice.actions;\n\n// export const selectCarLists = (state: RootState) => state.carLists.carLists;\n\n// export const selectCarStatus = (state: RootState) => state.carLists.status;\n\n// export default carListSlice.reducer;"],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA"},"metadata":{},"sourceType":"module"}