{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { fetchPeopleLists, createPeopleList } from \"./PeopleAPI\";\nexport let Status;\n\n(function (Status) {\n  Status[\"Initial\"] = \"Nothing fetched\";\n  Status[\"Loading\"] = \"Loading..\";\n  Status[\"Deleted\"] = \"Deleted!\";\n  Status[\"UpToDate\"] = \"It's up to date!\";\n  Status[\"Error\"] = \"Error\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  peopleLists: [{\n    id: 0,\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  }],\n  status: Status.Initial\n};\nexport const fetchPeopleListsAsync = createAsyncThunk('peopleLists/fetchPeopleLists', async () => {\n  const response = await fetchPeopleLists();\n  return response;\n});\nexport const createListAsync = createAsyncThunk('peopleLists/createPeopleList', async payload => {\n  const response = await createPeopleList(payload);\n  return response;\n});\nexport const destroyListAsync = createAsyncThunk('peopleLists/destroyPeopleList', async payload => {\n  const response = await destroyList(payload);\n  return response;\n});\nexport const peopleListSlice = createSlice({\n  name: \"peopleLists\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPeopleListsAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n      return produce(state, draft => {\n        draft.peopleLists = action.payload;\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(fetchPeopleListsAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n      });\n    })\n    /** Create */\n    .addCase(createListAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(createListAsync.fulfilled, (state, action) => {\n      return produce(state, draft => {\n        draft.peopleLists.push(action.payload);\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(createListAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n      });\n    });\n  }\n});\nexport const {} = peopleListSlice.actions;\nexport const selectPeopleLists = state => state.peopleLists.peopleLists;\nexport const selectPeopleStatus = state => state.peopleLists.status;\nexport default peopleListSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","produce","fetchPeopleLists","createPeopleList","Status","initialState","peopleLists","id","first_name","last_name","email","status","Initial","fetchPeopleListsAsync","response","createListAsync","payload","destroyListAsync","destroyList","peopleListSlice","name","reducers","extraReducers","builder","addCase","pending","state","draft","Loading","fulfilled","action","UpToDate","rejected","Error","push","actions","selectPeopleLists","selectPeopleStatus","reducer"],"sources":["/Users/byeonghyeokjo/Desktop/artona/failed/src/features/lists/ListsSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { RootState } from \"../../app/store\";\nimport { fetchPeopleLists, createPeopleList, destroyPeopleList } from \"./PeopleAPI\";\n\n\nexport enum Status {\n    Initial = \"Nothing fetched\",\n    Loading = \"Loading..\",\n    Deleted = \"Deleted!\",\n    UpToDate = \"It's up to date!\",\n    Error = \"Error\"\n}\n\nexport interface PeopleListFormData {\n    list: {\n        id?: number,\n        first_name?: string,\n        last_name?: string,\n        email?: string\n    }\n}\n\nexport interface PeopleListUpdataData {\n    id: number;\n    list: PeopleListState;\n}\n\nexport interface PeopleListDeleteData {\n    list: {\n        id: number;\n    }\n}\n\nexport interface PeopleListState {\n    id?: number,\n    first_name?: string,\n    last_name?: string,\n    email?: string\n    \n}\n\nexport interface PeopleListsState {\n    peopleLists: PeopleListState[];\n    status: string;\n}\n\nconst initialState: PeopleListsState = {\n    peopleLists: [\n        {\n            id: 0,\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\"\n        }\n    ],\n    status: Status.Initial\n}  \n\nexport const fetchPeopleListsAsync = createAsyncThunk(\n    'peopleLists/fetchPeopleLists',\n    async () => {\n        const response = await fetchPeopleLists();\n        return response;\n    }\n);\n\nexport const createListAsync = createAsyncThunk(\n    'peopleLists/createPeopleList',\n    async (payload: PeopleListFormData) => {\n        const response = await createPeopleList(payload);\n        return response;\n    }\n);\n\nexport const destroyListAsync = createAsyncThunk(\n    'peopleLists/destroyPeopleList',\n    async (payload: PeopleListDeleteData) => {\n        const response = await destroyList(payload);\n        return response; \n    }\n);\n\n\nexport const peopleListSlice = createSlice({\n    name: \"peopleLists\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchPeopleListsAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n                return produce(state, (draft) => {\n                    draft.peopleLists = action.payload;\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                })\n            })\n            /** Create */\n            .addCase(createListAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(createListAsync.fulfilled, (state, action) => {\n                return produce(state, (draft) => {\n                    draft.peopleLists.push(action.payload);\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(createListAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                })\n            })\n    }\n});\n\nexport const {} = peopleListSlice.actions;\n\nexport const selectPeopleLists = (state: RootState) => state.peopleLists.peopleLists;\n\nexport const selectPeopleStatus = (state: RootState) => state.peopleLists.status;\n\nexport default peopleListSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAsE,aAAtE;AAGA,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAyCZ,MAAMC,YAA8B,GAAG;EACnCC,WAAW,EAAE,CACT;IACIC,EAAE,EAAE,CADR;IAEIC,UAAU,EAAE,EAFhB;IAGIC,SAAS,EAAE,EAHf;IAIIC,KAAK,EAAE;EAJX,CADS,CADsB;EASnCC,MAAM,EAAEP,MAAM,CAACQ;AAToB,CAAvC;AAYA,OAAO,MAAMC,qBAAqB,GAAGd,gBAAgB,CACjD,8BADiD,EAEjD,YAAY;EACR,MAAMe,QAAQ,GAAG,MAAMZ,gBAAgB,EAAvC;EACA,OAAOY,QAAP;AACH,CALgD,CAA9C;AAQP,OAAO,MAAMC,eAAe,GAAGhB,gBAAgB,CAC3C,8BAD2C,EAE3C,MAAOiB,OAAP,IAAuC;EACnC,MAAMF,QAAQ,GAAG,MAAMX,gBAAgB,CAACa,OAAD,CAAvC;EACA,OAAOF,QAAP;AACH,CAL0C,CAAxC;AAQP,OAAO,MAAMG,gBAAgB,GAAGlB,gBAAgB,CAC5C,+BAD4C,EAE5C,MAAOiB,OAAP,IAAyC;EACrC,MAAMF,QAAQ,GAAG,MAAMI,WAAW,CAACF,OAAD,CAAlC;EACA,OAAOF,QAAP;AACH,CAL2C,CAAzC;AASP,OAAO,MAAMK,eAAe,GAAGnB,WAAW,CAAC;EACvCoB,IAAI,EAAE,aADiC;EAEvCf,YAFuC;EAGvCgB,QAAQ,EAAE,EAH6B;EAIvCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACaX,qBAAqB,CAACY,OADnC,EAC6CC,KAAD,IAAW;MAC/C,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAACwB,OAAtB;MACH,CAFa,CAAd;IAGH,CALL,EAMKJ,OANL,CAMaX,qBAAqB,CAACgB,SANnC,EAM8C,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACzD,OAAO7B,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACrB,WAAN,GAAoBwB,MAAM,CAACd,OAA3B;QACAW,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAAC2B,QAAtB;MACH,CAHa,CAAd;IAIH,CAXL,EAYKP,OAZL,CAYaX,qBAAqB,CAACmB,QAZnC,EAY8CN,KAAD,IAAW;MAChD,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAAC6B,KAAtB;MACH,CAFa,CAAd;IAGH,CAhBL;IAiBI;IAjBJ,CAkBKT,OAlBL,CAkBaT,eAAe,CAACU,OAlB7B,EAkBuCC,KAAD,IAAW;MACzC,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAACwB,OAAtB;MACH,CAFa,CAAd;IAGH,CAtBL,EAuBKJ,OAvBL,CAuBaT,eAAe,CAACc,SAvB7B,EAuBwC,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACnD,OAAO7B,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACrB,WAAN,CAAkB4B,IAAlB,CAAuBJ,MAAM,CAACd,OAA9B;QACAW,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAAC2B,QAAtB;MACH,CAHa,CAAd;IAIH,CA5BL,EA6BKP,OA7BL,CA6BaT,eAAe,CAACiB,QA7B7B,EA6BwCN,KAAD,IAAW;MAC1C,OAAOzB,OAAO,CAACyB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAAChB,MAAN,GAAeP,MAAM,CAAC6B,KAAtB;MACH,CAFa,CAAd;IAGH,CAjCL;EAkCH;AAvCsC,CAAD,CAAnC;AA0CP,OAAO,MAAM,KAAKd,eAAe,CAACgB,OAA3B;AAEP,OAAO,MAAMC,iBAAiB,GAAIV,KAAD,IAAsBA,KAAK,CAACpB,WAAN,CAAkBA,WAAlE;AAEP,OAAO,MAAM+B,kBAAkB,GAAIX,KAAD,IAAsBA,KAAK,CAACpB,WAAN,CAAkBK,MAAnE;AAEP,eAAeQ,eAAe,CAACmB,OAA/B"},"metadata":{},"sourceType":"module"}