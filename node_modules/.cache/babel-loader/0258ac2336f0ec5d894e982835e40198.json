{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { fetchPeopleLists, createPeopleList } from \"./PeopleAPI\";\nexport let Status;\n\n(function (Status) {\n  Status[\"Initial\"] = \"Nothing fetched\";\n  Status[\"Loading\"] = \"Loading..\";\n  Status[\"Deleted\"] = \"Deleted!\";\n  Status[\"UpToDate\"] = \"It's up to date!\";\n  Status[\"Error\"] = \"Error\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  peopleLists: [{\n    id: 0,\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  }],\n  status: Status.Initial\n};\nexport const fetchPeopleListsAsync = createAsyncThunk('peopleLists/fetchPeopleLists', async () => {\n  const response = await fetchPeopleLists();\n  return response;\n});\nexport const createListAsync = createAsyncThunk('peopleLists/createPeopleList', async payload => {\n  const response = await createPeopleList(payload);\n});\nexport const peopleListSlice = createSlice({\n  name: \"peopleLists\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPeopleListsAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n      return produce(state, draft => {\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(fetchPeopleListsAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n      });\n    })\n    /** Update */\n    .addCase(fetchPeopleListsAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n      return produce(state, draft => {\n        draft.peopleLists.push(action.payload);\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(fetchPeopleListsAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n      });\n    });\n  }\n});\nexport const {} = peopleListSlice.actions;\nexport const selectPeopleLists = state => state.peopleLists.peopleLists;\nexport const selectPeopleStatus = state => state.peopleLists.status;\nexport default peopleListSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","produce","fetchPeopleLists","createPeopleList","Status","initialState","peopleLists","id","first_name","last_name","email","status","Initial","fetchPeopleListsAsync","response","createListAsync","payload","peopleListSlice","name","reducers","extraReducers","builder","addCase","pending","state","draft","Loading","fulfilled","action","UpToDate","rejected","Error","push","actions","selectPeopleLists","selectPeopleStatus","reducer"],"sources":["/Users/byeonghyeokjo/Desktop/artona/failed/src/features/lists/ListsSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { RootState } from \"../../app/store\";\nimport { fetchPeopleLists, createPeopleList } from \"./PeopleAPI\";\n\n\nexport enum Status {\n    Initial = \"Nothing fetched\",\n    Loading = \"Loading..\",\n    Deleted = \"Deleted!\",\n    UpToDate = \"It's up to date!\",\n    Error = \"Error\"\n}\n\nexport interface ListFormData {\n    list: {\n        id?: number,\n        first_name?: string,\n        last_name?: string,\n        email?: string\n    }\n}\n\nexport interface PeopleListState {\n    id?: number,\n    first_name?: string,\n    last_name?: string,\n    email?: string\n    \n}\n\nexport interface PeopleListsState {\n    peopleLists: PeopleListState[];\n    status: string;\n}\n\nconst initialState: PeopleListsState = {\n    peopleLists: [\n        {\n            id: 0,\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\"\n        }\n    ],\n    status: Status.Initial\n}  \n\nexport const fetchPeopleListsAsync = createAsyncThunk(\n    'peopleLists/fetchPeopleLists',\n    async () => {\n        const response = await fetchPeopleLists();\n        return response;\n    }\n);\n\nexport const createListAsync = createAsyncThunk(\n    'peopleLists/createPeopleList',\n    async (payload: ListFormData) => {\n        const response = await createPeopleList(payload);\n    }\n);\n\nexport const peopleListSlice = createSlice({\n    name: \"peopleLists\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchPeopleListsAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                })\n            })\n            /** Update */\n            .addCase(fetchPeopleListsAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n                return produce(state, (draft) => {\n                    draft.peopleLists.push(action.payload);\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                })\n            })\n    }\n});\n\nexport const {} = peopleListSlice.actions;\n\nexport const selectPeopleLists = (state: RootState) => state.peopleLists.peopleLists;\n\nexport const selectPeopleStatus = (state: RootState) => state.peopleLists.status;\n\nexport default peopleListSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}