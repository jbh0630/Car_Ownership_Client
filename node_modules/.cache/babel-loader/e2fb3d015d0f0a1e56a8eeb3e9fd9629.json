{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { fetchPeopleLists } from \"./PeopleAPI\";\nexport let Status;\n\n(function (Status) {\n  Status[\"Initial\"] = \"Nothing fetched\";\n  Status[\"Loading\"] = \"Loading..\";\n  Status[\"Deleted\"] = \"Deleted!\";\n  Status[\"UpToDate\"] = \"It's up to date!\";\n  Status[\"Error\"] = \"Error\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  peopleLists: [{\n    id: 0,\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  }],\n  status: Status.Initial\n};\nexport const fetchPeopleListsAsync = createAsyncThunk('peopleLists/fetchPeopleLists', async () => {\n  const response = await fetchPeopleLists();\n  return response;\n});\nexport const peopleListSlice = createSlice({\n  name: \"peopleLists\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPeopleListsAsync.pending, state => {\n      return produce(state, draft => {\n        draft.status = Status.Loading;\n      });\n    }).addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n      return produce(state, draft => {\n        draft.peopleLists = action.payload;\n        draft.status = Status.UpToDate;\n      });\n    }).addCase(fetchPeopleListsAsync.rejected, state => {\n      return produce(state, draft => {\n        draft.status = Status.Error;\n      });\n    });\n  }\n});\nexport const {} = peopleListSlice.actions;\nexport const selectPeopleLists = state => state.peopleLists.peopleLists;\nexport const selectPeopleStatus = state => state.peopleLists.status;\nexport default peopleListSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","produce","fetchPeopleLists","Status","initialState","peopleLists","id","first_name","last_name","email","status","Initial","fetchPeopleListsAsync","response","peopleListSlice","name","reducers","extraReducers","builder","addCase","pending","state","draft","Loading","fulfilled","action","payload","UpToDate","rejected","Error","actions","selectPeopleLists","selectPeopleStatus","reducer"],"sources":["/Users/byeonghyeokjo/Desktop/artona/failed/src/features/lists/ListsSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { RootState } from \"../../app/store\";\nimport { fetchPeopleLists } from \"./PeopleAPI\";\n\n\nexport enum Status {\n    Initial = \"Nothing fetched\",\n    Loading = \"Loading..\",\n    Deleted = \"Deleted!\",\n    UpToDate = \"It's up to date!\",\n    Error = \"Error\"\n}\n\nexport interface PeopleListState {\n    id?: number,\n    first_name?: string,\n    last_name?: string,\n    email?: string\n    \n}\n\nexport interface PeopleListsState {\n    peopleLists: PeopleListState[];\n    status: string;\n}\n\nconst initialState: PeopleListsState = {\n    peopleLists: [\n        {\n            id: 0,\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\"\n        }\n    ],\n    status: Status.Initial\n}  \n\nexport const fetchPeopleListsAsync = createAsyncThunk(\n    'peopleLists/fetchPeopleLists',\n    async () => {\n        const response = await fetchPeopleLists();\n        return response;\n    }\n);\n\nexport const peopleListSlice = createSlice({\n    name: \"peopleLists\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchPeopleListsAsync.pending, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Loading;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.fulfilled, (state, action) => {\n                return produce(state, (draft) => {\n                    draft.peopleLists = action.payload;\n                    draft.status = Status.UpToDate;\n                })\n            })\n            .addCase(fetchPeopleListsAsync.rejected, (state) => {\n                return produce(state, (draft) => {\n                    draft.status = Status.Error;\n                })\n            })\n    }\n});\n\nexport const {} = peopleListSlice.actions;\n\nexport const selectPeopleLists = (state: RootState) => state.peopleLists.peopleLists;\n\nexport const selectPeopleStatus = (state: RootState) => state.peopleLists.status;\n\nexport default peopleListSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AAGA,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAqBZ,MAAMC,YAA8B,GAAG;EACnCC,WAAW,EAAE,CACT;IACIC,EAAE,EAAE,CADR;IAEIC,UAAU,EAAE,EAFhB;IAGIC,SAAS,EAAE,EAHf;IAIIC,KAAK,EAAE;EAJX,CADS,CADsB;EASnCC,MAAM,EAAEP,MAAM,CAACQ;AAToB,CAAvC;AAYA,OAAO,MAAMC,qBAAqB,GAAGb,gBAAgB,CACjD,8BADiD,EAEjD,YAAY;EACR,MAAMc,QAAQ,GAAG,MAAMX,gBAAgB,EAAvC;EACA,OAAOW,QAAP;AACH,CALgD,CAA9C;AAQP,OAAO,MAAMC,eAAe,GAAGd,WAAW,CAAC;EACvCe,IAAI,EAAE,aADiC;EAEvCX,YAFuC;EAGvCY,QAAQ,EAAE,EAH6B;EAIvCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACFC,OADL,CACaP,qBAAqB,CAACQ,OADnC,EAC6CC,KAAD,IAAW;MAC/C,OAAOpB,OAAO,CAACoB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACZ,MAAN,GAAeP,MAAM,CAACoB,OAAtB;MACH,CAFa,CAAd;IAGH,CALL,EAMKJ,OANL,CAMaP,qBAAqB,CAACY,SANnC,EAM8C,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACzD,OAAOxB,OAAO,CAACoB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACjB,WAAN,GAAoBoB,MAAM,CAACC,OAA3B;QACAJ,KAAK,CAACZ,MAAN,GAAeP,MAAM,CAACwB,QAAtB;MACH,CAHa,CAAd;IAIH,CAXL,EAYKR,OAZL,CAYaP,qBAAqB,CAACgB,QAZnC,EAY8CP,KAAD,IAAW;MAChD,OAAOpB,OAAO,CAACoB,KAAD,EAASC,KAAD,IAAW;QAC7BA,KAAK,CAACZ,MAAN,GAAeP,MAAM,CAAC0B,KAAtB;MACH,CAFa,CAAd;IAGH,CAhBL;EAiBH;AAtBsC,CAAD,CAAnC;AAyBP,OAAO,MAAM,KAAKf,eAAe,CAACgB,OAA3B;AAEP,OAAO,MAAMC,iBAAiB,GAAIV,KAAD,IAAsBA,KAAK,CAAChB,WAAN,CAAkBA,WAAlE;AAEP,OAAO,MAAM2B,kBAAkB,GAAIX,KAAD,IAAsBA,KAAK,CAAChB,WAAN,CAAkBK,MAAnE;AAEP,eAAeI,eAAe,CAACmB,OAA/B"},"metadata":{},"sourceType":"module"}